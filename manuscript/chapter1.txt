#Thinking Functionally in PHP?

##Introduction
That's right! If you thought that PHP stood for *PHP: Hypertext Preprocessor*, you're wrong. It stands for **PH**unctional **P**rogramming... OK I'm only kidding.
 
The PHP community has come a long way since the early starts of PHP mainly as a procedural, imperative language. Now, since PHP 5 you've become a Object-Oriented (OO) developer. You take advantage of abstract classes and interfaces to properly implement the guiding principles of polymorphism, inheritance, and encapsulation. All of this comes into play when building rich domain models utilizing all of the coolest design patterns. Having learned all this, have you been able to reduce the development effort of building large enterprise web applications? Certainly. But is complexity still an issue and bugs frequent? Is your application easy to unit test? How reusable is your code?  

The PHP applications of yesterday are no match for the complex, dynamic, and distributed applications of today. It's commonplace now that our users demand that their applications run in cloud environments, integrated with a network of third-party services, and expect SLAs to hold at above 99%. The new buzzword is *microservices* architectures. You’ll always be dealing with having to balance low cost with return of investment against our desire to build robust, maintainable architectures. 

Naturally, as developers, we gravitate towards MVC frameworks that help us create an extensible and clean system design with scaffolding and plumbing for routing, templates, persistence models, services, dependency injection (DI), and built-in integration with database servers--Laravel is a good example of this and there are many others. Despite all of this, our business logic code is still becoming hard to reason about, and this is because we still use things like shared variables, mutable state, monolithic functions, side effects, and others. These seemingly small concerns, which we secretely know to be bad practices but do them anyways, are what functional programming encourages and challenges you to pay close attention to.  

Object-oriented design certainly moves the needle in the right direction, but we need more. Perhaps you’ve been hearing about functional programming (FP) in recent years and how companies like Twitter move to Scala, WhatsApp written in Erlang. Also, language manufacturers are placing functional constructs into their languages. Hence, Java, JavaScript, F#, C#, Scala, Python, Ruby, all have some form of functional features because the industry is realizing that writing code functionally is opening the door to very clean and extensible architectures, as well as making their developers more productive. Companies like Netflix have bet their success on functional-reactive systems, which are built heavily on these ideas, so we'll look at reactive solutions built only using PHP.

If you don't know that PHP also supports writing functional code, then you downloaded the right book. FP is the programming paradigm you need. While based on very simple concepts, FP requires a shift in the way you think about a problem. This isn’t a new tool, a library, or an API, but a different approach to problem solving that will become intuitive once you’ve understood its basic principles, design patterns, and how they can be used against the most complex tasks. Also, it’s not an all or nothing solution. In later chapters, I’ll show you how FP can be used in conjunction with OO and unpack the meaning of “OO in the large, FP in the small.”

##Which PHP version to use?
As I mentioned before, you can implement a functional style using PHP 5.3+. This is around the time that the *Closure* class was added to the language (more on this later). However, there are good reasons for upgrading to PHP 7. Aside from it being much faster, matching the runtime speed of [Hack](http://hacklang.org/), and sometimes even better, the latest release adds [strict typing and scalar type declarations](http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration). 

{width=50%,float=center}
![Approx PHP language timeline](images/timeline.png)

Type declarations allow you to qualify any function parameter with its proper class or scalar type (boolean, integer, string, MyClass, etc). These were partially supported in PHP 5 as "type hints" but without scalar support. In PHP 7, you can also declare the type of a function's return value. 

Being a dynamic language, PHP will always attempt to coerce values of the wrong type into the expected scalar type, if appropriate. For instance, a function that expects an integer argument, when given a string, will coerce that value to an integer:

~~~
function increment($counter) { 
	return ++$counter; 
}
increment("Ft. Lauderdale"); //-> Ft. Lauderdalf ????
~~~

Sometimes we want this flexibility, but when we overdo it this can lead to very confusing and hard to read code. What we'll do in this book is use PHP's strict typing mechanism which you can turn on by including this at the top of every file: 

~~~
declare(strict_types=1);
~~~ 

Type declarations makes your code instantly self-documented, allows the compiler to perform certain clever optimizations, and lets modern IDEs better guide you using type inference. Types checks also ensure your code is correct by enforcing type constraints on your function calls. In PHP, a *TypeError* occurs when a function contract is violated:  

~~~
increment("Ft. Lauderdale");

PHP Warning:  Uncaught TypeError: Argument 1 passed to increment() must be of the type integer, string given...
~~~
Armed with the proper tool, let's discuss why learning to think functionally is important and how it can help you combat the complexities of PHP programs.
##Hello FP
As I mentioned before, functional programming is not a framework or a tool, but a way of writing code; thinking functionally is radically different from thinking in object-oriented or imperative terms. So, how do you become functional? How do you begin to think this way? Functional programming is actually very intuitive once you’ve grasped its essence. Unlearning old habits is actually the hardest part and can be a huge paradigm shift for most people that come from a different background.
In simple terms, FP is a software development style that places a major emphasis on the use of functions. In this regard, you might consider it a procedural programming paradigm (based on procedures, subroutines, or functions), and at its core it is, but with very different philosophies. You might say, “well, I already use functions on a day-to-day basis at work; what’s the difference?” As I mentioned earlier, functional programming requires you to think a bit differently about how to approach the tasks you are facing. Your goal will be to abstract entire control flows and operations on data with functions in order to avoid *side effects* and *reduce mutation of state* in your application. By practicing FP, you'll become an expert in certain PHP language constructs that are rarely used in other paradigms, like taking advantage of closures and higher-order functions, which were introduced back in PHP 5.3. Both of these concepts are key to building the functional primitives that you'll be using in your code.
Without further ado, let's start with a simple 'Hello FP' example. Creating a simple script is probably the easiest way to get PHP up and running, and that’s all you’ll need for this chapter. Fire up your PHP REPL [`shell> php -a`]. Because I want to focus more on building the theoretical foundations in this chapter, I'll use very simple examples and simple functions. As you move through the book, we'll tackle on more real-world examples that involve file systems, HTTP requests, databases, etc.~~~$file = fopen('ch01.txt', 'w');	
fwrite($file, 'Hello FP!'); //-> writes 'Hello FP'~~~This program is very simple, but because everything is hard-coded you can’t use it to display messages dynamically. Say you wanted to change the message contents or where it will be written to; you will need to rewrite this entire expression. Consider wrapping this code with a function and making these change-points parameters, so that you write it once and use it with any configuration.~~~function toFile($filename, $message) {    $file = fopen($filename, 'w');	     return fwrite($file, $message);}toFile('ch01.txt', 'Hello FP'); //-> writes 'Hello FP'~~~An improvement, indeed, but still not a completely reusable piece of code. Suppose your requirements change and now you need to repeat this message twice. Obviously, your reaction will be to change the business logic of `toFile` to support this:
~~~function toFile($filename, $message) {    $file = fopen($filename, 'w');	     return fwrite($file, $message. ' ' . $message);}toFile('ch01.txt', 'Hello FP'); //-> writes 'Hello FP Hello FP'~~~
This simple thought process of creating parameterized functions to carry out simple tasks is a step in the right direction; however, it would be nice to minimize reaching into your core logic to support slight changes in requirements. We need to make our code more *extensible*. Thinking functionally involves treating parameters as not just simple scalar values but  also as functions themselves that provide additional functionality; it also involves using functions or (*callables*) as just pieces of data that can be passed around anywhere. The end result is that we end up evaluating and combining lots of functions together that individually don't add much value, but together solve entire programs. I'll make a slight transformation to the function `toFile`:
~~~
function toFile($filename) {
	return function ($message) use ($filename) {
		$file = fopen($filename, 'w');	 
	    return fwrite($file, $message);	
	};
}~~~At first, it won't be intuitive why I made this change. Returning functions from other functions? Let me fast-forward a bit more and show you how I can use this function in its current form. Here's a sneak peek at this same program using a functional approach.~~~
$run = compose(toFile('ch01.txt'), $repeat(2), 'htmlentities');
$run('Functional PHP <i>Rocks!</i>'); 

//-> writes 'Functional PHP &lt;i&gt;Rocks!&lt;/i&gt; Functional PHP &lt;i&gt;Rocks!&lt;/i&gt;'~~~And just as I directed this input text to a file, I could have just as easily sent it to the console, to the database, or over the network. Without a doubt, this looks radically different than the original. I'll highlight just a couple of things now. For starters, the file is not a scalar string anymore; it’s a function or *callable* called `toFile`. Also, notice how I was able to split the logic of IO from manipulating its contents. Visually, it feels as though we're creating a bigger function from smaller ones. In traditional PHP applications, it's rare to see functions used this way. We typically declare functions and invoke them directly. In FP, it's common to pass around function references.
Above all, the important aspect about this code sample above is that it captures the process of decomposing a program into smaller pieces that are more reusable, reliable, and easier to understand; then they are combined to form an entire program that is easier to reason about as a whole. Thinking about each of these simple functions individually is very easy, and separating the concerns of business logic and file IO makes your programs easier to test. Every functional program follows this fundamental principle. 
Now I just introduced a new concept `compose`, itself a function, to invoke a series of other functions together. I’ll explain what this means later on and how to use it to its fullest potential. Behind the scenes, it basically links each function in a chain-like manner by passing the return value of one as input to the next. In this case, the string “Functional PHP <i>Rocks!</i>” was  passed into `htmlentities` which returns an HTML-escaped string, passed into `$repeat(2)`, and finally its result passed into `toFile`. All you need to is make sure every function individually executes correctly. Becasue PHP 7 ensures that all of thet types match, you can be confident this program will yield the right results. This is analogous to stacking legoes together and will be central to the theme in this book: "Thar Art of Function Composition."

So, why does functional code look this way? I like to think of it as basically parameterizing your code so that you can easily change it in a non-invasive manner—like adjusting an algorithm’s initial conditions. This visual quality is not accidental. When comparing the functional to the non-functional solution, you may have noticed that there is a radical difference in style. Both achieve the same purpose, yet look very different. This is due to functional programming’s inherent declarative style of development.
##Declarative codingFunctional programming is foremost a declarative programming paradigm. This means they express a logical connection of operations without revealing how they’re implemented or how data actually flows through them. Chapter 3 shows you how to build these data flows using point-free coding. 
As you know, the more popular models used today in PHP are procedural and object-oriented, both imperative paradigms. For instance, sites built using older versions of Wordpress or Moodle are heavily procedural; whereas, sites built using Laravel are completely OOP.Imperative programming treats a computer program as merely a sequence of top-to-bottom statements that change the state of the system in order to compute a result. Let’s take a look at a simple imperative example. Suppose you need to square all of the numbers in an array. An imperative program follows these steps:~~~
$array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for($i = 0; $i < count($array); $i++) {
   $array[$i] = pow($array[$i], 2);
}

$array; //-> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]~~~Imperative programming tells the computer, in great detail, how to perform a certain task (looping through and applying the square formula to each number, in this case). This is the most common way of writing this code and most likely will be your first approach to tackling this problem. 
Declarative programming, on the other hand, *separates program description from evaluation*. It focuses on the use of expressions to describe what the logic of a program is or what output would look like without necessarily specifying its control flow or state changes. This is done with the use of higher-order functions that establish a certain vocabulary based on a few set of primitives like filter, map, reduce, zip, compose, curry, lift, etc. These are just some of the common terms used a lot with FP that you'll learn about in this book. Once you employ this vocabulary to concot the instructions (subroutines, functions, procedures, etc) that make up your program, the PHP runtime translates this higher level of abstraction into regular PHP code: Shifting to a functional approach to tackle this same task, you only need to be concerned with applying the correct behavior at each element and cede control of looping to other parts of the system. I can let PHP's `array_map()` do the work:~~~
$square = function ($num) {
   return pow($num, 2);
};
array_map($square, $array);  //-> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]~~~The function `array_map()` also works with *callables* or functions just like the `compose` function shown earlier. Notice a trend? No? Consider this example. Suppose we also needed to add all of the values within the array. So, we need `add` function:
~~~
function add($a, $b) {
	return $a + $b;
}~~~
Now, without fiddling with the internals of the function, I use the adder to reduce the array into a single number: 
~~~
array_reduce(array_map($square, $array), 'add'); //-> 285~~~Comparing this code to the imperative version, you see that you’ve freed yourself from the responsibility of properly managing a loop counter and array index access; put simply, the more code you have, the more places there are for bugs to occur. Also, standard loops are not reusable artifacts, only when they are abstracted within functions. Abstracting loops with functions will allow you to take advantage of PHP's *anonymous function syntax* and *closures*. 
##Designing for immutability and statelessnessFunctions like `array_map()` have other benefits: they are immutable, which means it doesn't change the contents of the original array that's passed to it. 
Coding with immutable variables has many benefits such as: 
1. One of the main causes of bugs in software is when the state of an object inadvertently changes, or its reference becomes null. Immutable objects can be passed around to any function and their states will always remain the same. You can count on having the peace mind that state is only permitted to grow but never change. It eases the "congnitive load" (the amount of state to keep track of in your head) of any single component of your system. 
2. Immutable data structures are important in shared memory multithreaded applications. We won't talk much about concurrent processing in this book because PHP processes run in isolation for the most part.  Now, whether designing for parallelism or not, stateless objects is a widely used pattern seen in many common PHP deployments. For example, as a best practice, Symfony services (or service objects) should always be stateless. A [service](https://igor.io/2013/03/31/stateless-services.html) shouldn't persist any state and provide a set of transient functions that take in the domain its working on, perform some kind of computation of business logic, and return the result.  
Unfortunately, unlike Scala, F#, and others, PHP provides very poor support for immutable variables. You're only options really are using the `define` function or `const` keyword. Here's a quick comparison of the two:
* `const` are defined at compile time, which means compilers can be clever about how to store them, but you can't conditionally declare them (which is a good thing). The following fails in PHP 7:

~~~
if (<some condition>) { 
   const C1 = 'FOO';
}
else {
   const C2 = 'BAR';
}~~~* Constants declared with 'define' are a bit more versatile and dynamic. Because the compiler won't attempt to allocate space for them until it actually sees them. So you can do this: 
~~~
if (<some condition>) { 
   define('C1', 'FOO');
}
else {
   define('C2', 'BAR');
}~~~But you should always check if a constant has been defined with `defined($name)` before accessing its value using `constant($name)`. * `const` properly scopes constants into the namespace you're class resides in. `define` will scope constants globally by default, unless the namespace is explicitly added.  * `const` behaves like any other variable declaration, which means it's case sensitive and requires a valid variable name. Because `define` is a function, you can use it to create constants with arbitrary expressions and also declare them to be case insensitive if you wish to do so. 
All things considered, `const` is much better to use because it's an actual keyword and not just a function call, which is what constants should be. Perhaps in the future,  PHP moves in the direction of allowing this class-level only feature to be used anywhere to define an entity that can ony be assigned once, whether it be a variable or function:

~~~const $square = function ($num) {
   return pow($num, 2);
};
~~~  Of course, as it is now, it's unrealistic to expect that we declare all of our variables using `define`. But you can get close to achieving stateless programs, just like those Symfony services we spoke of earlier, using pure functions.
##Pure functions fix side effectsFunctional programming is based on the premise that you will build immutable programs based on pure functions as the building blocks of your business logic. A pure function has the following qualities:
* It depends only on the input provided and not on any hidden or external state that may change during its evaluation or between calls.* It doesn’t inflict changes beyond its scope, like modifying a global object or a parameter passed by reference, after its run.
Intuitively, any function that does not meet these requirements would be qualified as “impure.” For example, while services are pure objects, repository or Data Access Objects (DAO)  aren't. This includes your Laravel Active Record objects, for example. Operations in DAOs always cause side effects because their sole purpose is to interact with an external resource, the database.
Programming with immutability can feel rather strange at first. After all, the whole point of imperative design, which is what we’re accustomed to, is to declare that variables are to mutate from one statement to the next (they are “variable” after all). PHP doesn't make any distinctions between *values* (immutable variables) and standard variables--they're all declared with the same "$" dollar sign. This is a very natural thing for us to do. Consider the following function that reads and modifies a global variable: ~~~$counter = 0; // resides somewhere in the global space (possibly in a different script)                    

... function increment() {   GLOBAL $counter;   return ++$counter;    }~~~You can also encouter side effects by accessing instance state through `$this`: 

~~~class Counter {
   private $_counter;   
   public function __construct($init) {
      $this->_counter = $init;
   }   
   
   ...
   public function increment() {
      return ++$this->_counter;
   }}
~~~

With a bit of discipline we can go a very long way. One thing we can do is stop using global variables and the `GLOBAL` mechanism in PHP. This is not only considered bad practice from a functional point of view, but also a bit frowned upon in modern PHP applications. A function like `increment` is impure as it reads/modifies an external variable `$counter`, which is not local to the function’s scope (it could actually live in a complete different file). This also applies to instance methods, but I'll defer how to get around these side effects to the next chapter.
Generally speaking, functions have side effects when reading from or writing to external resources. 

{width=50%,float=center}![Increment function with side effects](images/side_effect.png)Side effects are also a bad design because it causes your functions to be *temporally coupled* or dependent, which means the execution of one can determine the outcome of the next. In functional programming, functions are reusable artifacts that can be evaluated in any order and continue to yield correct results. 

{width=50%,float=center}
![Temporal coupling](images/side_effect2.png)
Side effects can be very ubiquitous. At a theoretical level, a side effect could be one of the following: 
* Changing a variable, property or data structure globally
* Changing the original value of a function’s argument
* Processing user input
* Throwing an exception, unless it’s caught within the same function
* Printing to the screen or logging
* Querying the HMTL documents, browser cookies, or databases 
Now what practical value would you get from a program that couldn't do any of these things? Indeed, pure functions can be very hard to use in a world full of dynamic behavior and mutation-- the real world. But, to benefit from functional programming you don't need to avoid all of these; FP just provides a framework to help you manage these while allowing you to separate the pure from the impure. Impure code produces externally visible side effects like the ones listed above, and in this book we’ll examine ways to deal with this.

For instance, I can easily refactor `increment` to declare that it requires you provide the current counter

~~~
function increment($counter) {
   return ++$counter;    }
~~~
This pure function is now not only immutable but also has a clear contract that describes clearly the information it needs to carry out its task, making it simpler to understand and use. This is a simple example, of course, but this level of reasoning can be taken to functions of any complexity. Generally, the goal is to create functions that do one thing and combine them together instead of creating large monolithic functions. 
##Referential TransparencyWe can take the notion of purity further. In functional programming, we redefine what it means to create a function. In a sense we go back to basics, to the maths, and treat functions as nothing more than a mapping of types. In this case, its input types (arguments) to its output type (return value). Functions in mathematics are predictable and constant, i.e. they return the same values given the same input always. This is the quality sought out in functional programs and achievable through pure functions, known as *referential transparency (RT)*. An familiar example of a function not RT is `rand()`.  
Referential transp	arency means just that. Your functions are to return the same values given the same input. Because there are no side effects, *a function's return value is directly derived from its input*. This makes our code not only easier to test, but also allows us to reason about entire programs much easier. Referential transparency (also known as equational correctness) is inherited from math, but functions in programming languages behave nothing like mathematical functions; so achieving referential transparency is strictly on us, especially in a non-pure functional language such as PHP. The benefit of doing is is that when your individual functions are predictable, your entire program is much easier to reason about, maintain, and debug, and especially test. Later on, you'll learn that functional programs are inherently testable, because referential transparency surfaces another principle of good tests, idempotent. An idempotent unit test is a fancy term to describe a unit test that's repeatable and consistent, so that for a given set of input you're guaranteed to compute the same output, always. This "contract" will then be documented as part of your test code; in essence, you get self-documenting code.

##Benefits of thinking functionallyThe topics introduced in this section serve as a brief introduction to some of the upcoming chapters in the book; if a concept is hard to grasp now, don’t worry; it will become clearer as you progress through the rest of the chapters. 
Now, let’s explore at a high level the benefits functional programming brings to your PHP code:
* Decompose tasks into simple functions* Process data using fluent chains
* Reduce complexity of asynchronous code###Decompose tasks into simple functions
At the core, functional programming is effectively the interplay between decomposition (breaking programs into small pieces) and composition (glueing the pieces back together). It is this duality that makes functional programs modular and so effective. As I mentioned previously, the unit of modularity, or “unit of work” is the function itself. Thinking functionally typically begins with decomposition or learning to break up a particular task into logical subtasks (functions). Because the modularity boundary is the function, I can identify three components in the "Hello FP" program earlier

![Decompose 'Hello FP'](images/decompose.png)Modularization in functional programming is closely related to the *Singularity* principle (one of the SOLID design principles), which states that functions should have a single purpose. In FP, we follow the guidelines for loosely coupled, highly cohesive functions. In other words, side effect free and single purpose. 
Purity and referential transparency will encourage you to think this way because in order to glue simple functions together they must agree on their types of inputs and outputs as well as arity or number of arguments. In short, they must agree on their exposed contracts, which is very similar to the *Coding to Interfaces* OO design princinple. From referential transparency, we learn that a function’s complexity is sometimes directly related to the number of arguments it receives. A practical observation and not a formal concept indicates that the lower the number of function parameters, the simpler the function tends to be. ![Building a function pipeline](images/compose.png)This process is essentially what `compose` does. Also called a function combinator (for obvious reasons), `compose` can glue together functions in a loosely decoupled way by binding one function's output to the next one's input. This is essentially the same *coding to interfaces* but at a much lower level of granularity. I will refer to this as a function pipeline.###Process data using fluent chainsDeveloping function pipelines is not the only way to gain fluency in a declarative way. I can also use a *Fluent Object* design pattern. The reasons for doing this might not seem obvious at first, but bear with me as I introduce this pattern. Aside from side effect free functions, in FP variables must be immutable (which sounds odd, I know). Because PHP doesn't give us this out of the box, we have to use patterns to fill in the gap. One pattern we can use is wrapping containers around a value to controls its state. Consider a simple `Container` class
~~~
class Container {
   private $_value;

   private function __construct($value) {		
      $this->_value = $value;				
   }

   // Unit function 
   public static function of($val) {			
      return new static($val);	
   }
   
   // Map function	
   public function map(callable $f) {	
      return static::of(call_user_func($f, $this->_value));
   }
   
   // Print out the container
   public function __toString() {
      return "Container[ {$this->_value} ]";  
   }
   
   // Deference container
   public function __invoke() {
      return $this->_value;
   }
}~~~Containers wrap data and provide a mechanism to transform it immutably by enabling a mapping function. This is in many ways analogous to `array_map()`. For instance, I can apply a series of transformations on a string like this  ~~~$c = Container::of('</ Hello FP >')->map(htmlspecialchars)->map(strtolower);
//-> Container[ &lt;/ hello fp &gt; ]
~~~Notice how this looks much cleaner and easier to parse against nesting these function calls one insider other. Personally, I rather see code in a flattened out and linear model. Otherwise, it would look like this
~~~
strtolower(htmlspecialchars('</ Hello FP >')); //-> &lt;/ hello fp &gt;~~~I also added some PHP magic with `__invoke()` that can be used to dereference the container upon invocation
~~~$c = Container::of('Hello FP')->map($repeat(2))->map(strlen);
$c(); //-> 16
~~~So, what's the use for this pattern? Earlier I mentioned that throwing exceptions, or for that matter, the imperative try/catch mechanism has side effects. Arguably, try/catch is also not very declarative and belongs in the same category as for loops and conditional statements. Containerizing values is an important design pattern in FP because it allows you to consolidate the logic of applying a function chain (sequence) of changes to some value immutably and side effect free. Later on, we'll see how this leads into the topic of *Monads*. 
This can be used to implement error handling. Consider this scenario
~~~$c = Container::of([1,2,3])->map(array_reverse);
print_r($c()) //-> [3, 2, 1]~~~

But if instead of a valid array, a `null` value was passed in, you will see: 

~~~
Warning: array_reverse() expects parameter 1 to be array, null given~~~One way to get around this is to make sure all functions you use (from PHP or custom) do some level of null-checking. But instead of repeating null-checks everywhere, wouldn't it be better to consolidate it all in once place? Consider the implementation for a `SafeContainer`
~~~
class SafeContainer extends Container {		
   // Performs null checks
   public function map(callable $f) {
      if(!empty($this->_value)) {
         return static::of(call_user_func($f, $this->_value));
      }
      return static::of(null); 			
   }	
}	~~~Now I don't have to worry about the error checking to permeate all of my business logic; it's all consolidated in one place
~~~
$c = SafeContainer::of(null)->map(array_reverse);
print_r($c()); //-> Nothing~~~The best part about this is that your function chains look exactly the same, there's nothing extra on your part, so you can continue to map as many functions as you need and any errors will be propagated through the entire chain behind the scenes. ##So, what is functional programming?With all of this so far, we can pack its fundamental principles to arrive at the following definition:
"***Functional programming refers to the declarative evaluation of pure functions to create immutable programs by avoiding externally observable side effects.***"Hope you've enjoyed this brief introduction of some of the topics covered in this book. In the next chapters we'll learn what enables PHP to be used functionally. In particular, you'll learn about higher-order, first-class functions, and closures, and some practical examples of using each technique. This will set the stage for developing data flows using PHP arrays. So stay tuned!