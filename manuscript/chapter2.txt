#Higher-order PHP
I mentioned in chapter 1 that functional programming is not a new framework, library, or design pattern. Rather, it's a way of thinking that offers an alternative to the way in which you design your code. However, paradigms by themselves are just abstract concepts that need the right host language to become a reality. And, yes! PHP is that language. In this chapter, I'll take a look at two important features of PHP: higher-order functions and closures. Both of these are instrumental in building all of the techniques you'll learn about in this book. The goal of this chapter is to teach you how to use functions in a very different way, the *functional* way.

##PHP's first-class, higher-order functions 
A higher-order function is defined as one that can accept other functions as arguments or be returned from another function. This is in direct relationship with another term you might've heard before, that has *first-class functions*. Both are intimately related, as the ability of a language artifact to be passed in as an argument or returned from a functions hinges on it being considered an object. This also means, of course, that functions can be assigned to variables. Let's take a look at a few examples: 

Functions in PHP can be manipulated just like objects. In fact, if you were to check the type of a function, you'll find out that they are instances of the class [`Closure`](http://php.net/manual/en/class.closure.php):

~~~
var_dump(function () { }); 

//-> class Closure#1 (0) {
     }
~~~

###Assign a function to a variable
This means that you should be able to treat a function just like any other type of object. Which means they can be assigned to variables. Consider a simple string concatenation function:
 
~~~
$concat2 = function ($s1, $s2) {
   return $s1. ' '. $s2;
};

$concat2('Hello', 'World');  //-> 'Hello World'
~~~

Behind the scenes this code takes the anonymous function (RHS) and assigns it to the variable `$concat2` (LHS). Alternatively, you can check for the presence of a function varible using [`is_callable()`](http://php.net/manual/en/function.is-callable.php):

~~~
is_callable($concat2) // 1
~~~ 

###Returned from a function
Functions can also be returned from another function. This is an extremely useful technique for creating families of functions. It's also the main part of implementing function currying, which you'll learn about in later chapters. Consider a simple `concatWith` function:

~~~
function concatWith($a) {
   return function ($b) use ($a) {
      return $a . $b;	
   };
}

$helloWith = concatWith('Hello');
$helloWith('World'); //-> 'Hello World'
~~~

###As a function parameter
Supplying functions as parameters allows you to administer specialized behavior on top of another function. Suppose I create a simple function that takes a *callable* (itself a function) and applies it onto its other parameters:

~~~
function apply(callable $operator, $a, $b) {
   return $operator($a, $b);
}
~~~

Through this *function argument*, I can inject any behavior I want:

~~~
$add = function ($a, $b) {
   return $a + $b;
};

$divide = function ($a, $b) {
   return $a / $b;
};

apply($add, 5, 5); //-> 10

apply($divide, 5, 5); //-> 10	
~~~

Consider a version of apply that's a bit more useful and expressive: 

~~~
function apply(callable $operator) {
   return function($a, $b) use ($operator) {
      return $operator($a, $b);
   };
}
~~~

Don't mind at this point the `use` keyword, I'll explain this further in a bit. Notice this code makes it very explicit what it's purpose is, and how I can use it to derive other types of functions from it. Let's go over some simple examples:

~~~
apply($add)(5, 5); //-> 10

apply($divide)(5, 5); //-> 1

// New function adder
$adder = apply($add);
$divider = apply($divide);

$adder(5,5); //-> 10
$divider(5,5); //-> 1
~~~

I mentioned earlier that higher-order functions allow you to supply specialized behavior via function arguments. Let's see this in action. What would happen if I call `apply($divide)(5, 0)`? Correct, a division by zero error:

~~~
Warning: Division by zero in .../code/src/ch02/ch02.php ...
~~~

To fix this, I'll create a function called `safeDivide` that  extra null-check logic. This function is a lot more resilient, returning PHP's NAN constant back to the caller.

~~~
/**
 * Divide two numbers 
 * @return int | NAN
 */
function safeDivide($a, $b) {   
   return empty($b) ? NAN : $a / $b;
}

apply($safeDivide)(5, 0); //-> NAN
~~~

The other reason why I prefer this approach is that checking for NAN requires a lot less effort and it's much cleaner than having to try and catch exceptions:

~~~
try {
   $result = apply($safeDivide)(5, 0);
   ...
   return $result;   
}
catch(Exception $e) {
    Log::error($e->getMessage());
}
~~~

This is a much better API design: 

~~~
$result = apply($safeDivide)(5, 0);
if(!is_nan($result)) {
   ...
   return $result;
}
else {
   Log::warning('Math error ocurred! Division by zero!');
}
~~~

This approach avoids throwing the exception altogether. Throwing anEeceptions is not only a side effect, as it causes the program stack to unwind, but also doesn't respect the *Locality Principle* of code. In particular, it fails to obey *spatial locality*, which states that related statements that should be executed sequentially shall be placed near each other. This has more application on CPU architecture, but can also be applied to code design.  

To recap, higher-order functions are possible in PHP because, as of PHP 5.3, they are actually `Closure` instances behind the scenes. Before this version, this was just considered an internal design decision, but now you can reliably take advantage of it to approach problems very differently. In this book, you'll learn to master higher-order functions. 

Furthermore, because functions are true instances, as of PHP 5.4 you can actually invoke methods on them which gives you more control of an anonymous function after it's been created (as you might expect, `Closure` instances all implement the magic method `__invoke()`, which is important for consistency reasons with other classes).

Here's the protocol for the [Closure class](http://php.net/manual/en/class.closure.php). In chapter 4, I'll spend some more time going over the details of this class:

~~~
class Closure {
   private __construct ( void )
   public static Closure bind ( Closure $closure , object $newthis [, mixed $newscope = "static" ] )
   public Closure bindTo ( object $newthis [, mixed $newscope = "static" ] )
   public mixed call ( object $newthis [, mixed $... ] )
}
~~~
###Heck, even plain objects are invokable
Aside from having true first-class, higher-order functions, PHP takes it to the next level with invocable objects. Now, this isn't really a functional concept whatsoever, but used correctly it could be a pretty cool technique.  In fact, PHP's anonymous function syntax under the hood gets compiled to a class with an `__invoke()` method on it. 

Now, the reason why this isn't really a functional technique per se, is that functional programming tends to impose a clear separation of behavior and state. I'll talk more about this in later chapters, but in essence that goal is to decouple the functiosn away from their owning objects. One reason for doing this is that the use of the `$this` keyword is a gateway for side effects. Consider this simple `Counter` class: 

~~~
class Counter {
   private $_value;

   public function __construct($init) {
      $this->_value = $init;
   }

   public function increment() {
      return $this->_value++;
   }
}

$c = new Counter(0);
$c->increment(); //-> 1
$c->increment(); //-> 2
$c->increment(); //-> 3
~~~ 

The `increment()` function is theoretically considered not pure (or impure) because it's reaching for data in its outer scope (the instance scope). Fortunately, this class encapsulates this state pretty well and doesn't expose any mutation methods (i.e. a setter). So, from a practical standpoint, this setter is predictable and constant. We can go ahead and make this object invocable by adding the magic `__invoke()` method:

~~~
public function __invoke() {
   return $this->increment()
}

$increment = new Counter(100);
increment(); //-> 101
increment(); //-> 102
increment(); //-> 103
~~~

In practical functional programming, there are many design patterns that revolve around wrapping values into objects and using functions to manipulate them, more on this later. But for the most part, we'll prefer to separate the behavior and the state. One way of doing this to keep things semantically meaningful is to prefer static functions that declare arguments for any data they need to carry out their job:

~~~
class Counter {
   ...
   public static function increment($val) {
      return $val + 1;
   }
}

Counter::increment(100); //-> 101
~~~

##Using containers improve your APIs
Earlier you learned that returning NAN in the event that `divide` was called with a zero denominator led to a better API design because it freed your users from having to wrap their code in try/catch blocks. This is always a good thing  because exceptions should be thrown only when there's no recovery path. However, we can do better. Working with numbers and NAN doesn't really get you anywhere; for example, adding anything to NAN (ex. `1 + NAN`) returns NAN, and rightfully so. So, instead of burdening your users to place `is_nan` checks everywhere, why not consolidate this logic in one place. 

In this section, I want to bring back the concept of containers from chapter 1 and mix it with using higher-order functions. Recall that I can use containers to wrap any value and transform it in an immutable way (i.e. as the value inside the container changes, new containers are created keeping the original intact). Here's an example:

~~~$c = Container::of('</ Hello FP >')->map(htmlspecialchars)->map(strtolower);
//-> Container[ &lt;/ hello fp &gt; ]
~~~

Since PHP is an OO language after all, I'll create a new container class that just extends `Container` and overrides the `map` function. For the sake of this example, I'll call this `SafeNumber`:

~~~
class SafeNumber extends Container {
   public function map(callable $f) {		
      if(!isset($this->_value) || is_nan($this->_value)) {
         return static::of(); // empty container		}
        else {
           return static::of(call_user_func($f, $this->_value));
        }			
    }
}
~~~

It looks very simple, but the effect of this wrapper type is incredible; most things in fucntional programming are very basic but with tremendous reach. I'll refactor `safeDivide` earlier to return a `SafeNumber`:

~~~~
/**
 * Divide two numbers
 * @return SafeNumber
 */
function safeDivide($a, $b) {   
   return SafeNumber::of(empty($b) ? NAN : $a / $b);
}
~~~~

One thing I like about this function is how honest it is about its return type. It's essentially notifying the caller that something might go wrong, and that it's safe to protect the result. Also, it removes the burden of having to NAN-check any functions that are invoked with this value. I'll show the cases of calling `safeDivide` with a valid as well as an invalid denominator:

~~~
	function square($a) {
		return $a * $a;
	}

	function increment($a) {
		return $a + 1;
	}

    // valid case
	apply(safeDivide2)(5, 1)->map(square)->map(increment); //-> Container [26]

    // error case
	apply(safeDivide2)(5, 0)->map(square)->map(increment)); //-> Container[  ]
~~~

`SafeNumber` abstracts out the details of dealing with an invalid number, so that our application functions stay focused on carrying out their work instead of having to deal with this. I'll revisit this concept again in later chatpters in the context of error handling when I discuss *Monads*. 

##Closures
TBD

A closure gets compiled to a class with a `__invoke()` but its constructor is what takes the data in `use`.


##Become a SOLID functional developer
TBD
###Singularity
TBD

###Liskov Substitution Principle
TBD


##What about our objects?

Treat as values
freeze PHP object
Lenses

##Functional vs Object-Oriented Summary

| Traits        | Functional           | Object-oriented  |
|:------------- |:-------------|:-----|
| Unit of composition      | Functions | Objects (classes) |
| Programming style     | Declarative      |   Mostly imperative |
| Data and Behavior | Loosely coupled into pure, standalone functions      |    Tightly coupled in classes with methods| 
|State Management | Treats objects as immutable values | Favors mutation of objects via instance methods |
|Control flow|Functions and recursion| Loops and conditionals|
|Tread-safety | Enables concurrent programming | Difficult to achieve |


